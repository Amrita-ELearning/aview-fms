var T_DEBUG = 1;
var T_INFO = 2;
var T_CURR_TIME = "";
//For trace statements, this level and all levels above will be used
var T_TRACE_LEVEL = T_DEBUG;
var T_PING_INTERVAL = 2000;
var T_POLL_TO_LOG_RATIO = 100;
//This counter is used to log the All clients live message only once for T_POLL_TO_LOG_RATIO times
//var pingLogMessageCounter = 0;

var BW_SUFFIX = "Kbps";
var VIEWER_SUFFIX = "VIEWER";
var recordingPresenterFile="";
var recordingViewerFile="";
var viewerFilenameForRename="";
var presenterFilenameForRename="";
var clearTimeOutId;
var timeOutCount=0;
function avc_logging(trace_message, caller_name, trace_level)
{
	if (trace_level >= T_TRACE_LEVEL){
		t_curr_time();
		trace("<"+T_CURR_TIME+ ">\tDESKTOP\t[" + caller_name + "]:\t" + trace_message);
	}
}

application.onAppStart = function()
{
	c_n = "onAppStart";
	avc_logging("Entered Function",c_n,T_DEBUG);

      //application.av_so = SharedObject.get("av_so1", false);
	sList=new Array();
	streamConnection=new Array();

	//Timer to call the ping method. This method pings the client to see if it's live
	//and if is not live, disconnects
	setInterval(pollClients,T_PING_INTERVAL);
	application.streamArray = new Array(); 
	avc_logging("Exited Function",c_n,T_DEBUG);
}

application.onConnect = function(client, name)
{

	c_n = "onConnect, Client:"+client.id+", "+client.ip+", Name:"+name;
	avc_logging("Entered Function",c_n,T_DEBUG);
	
	client.name = name;
	
	//This flag denotes whether this connection is closed because of retrys..
	//This is a initialization
	client.disconnectedDuringRetrys = false;

	///application.av_so.setProperty(name, "both");
	application.acceptConnection(client);
	
	avc_logging("User connected to server",c_n,T_INFO);

	avc_logging("Client.agent:"+client.agent,c_n,T_INFO);
	avc_logging("Client.ip:"+client.ip,c_n,T_INFO);
	avc_logging("Client.pageUrl:"+client.pageUrl,c_n,T_INFO);
	avc_logging("Client.referrer:"+client.referrer,c_n,T_INFO);
	avc_logging("Client.uri:"+client.uri,c_n,T_INFO);
	avc_logging("Client.virtualKey:"+client.virtualKey,c_n,T_INFO);
	avc_logging("Client.virtualKey:"+client.virtualKey,c_n,T_INFO);


	//This counter is used to log the client poll message only once for T_POLL_TO_LOG_RATIO times
	client.clientPingLogMessageCounter = 0;
	
	//Cleanup method, to be called at the end of application close
	client.disconnectConnection=function()
	{
		c_n = "disconnectConnection Client:"+client.id+","+client.ip+","+client.name+":";
		avc_logging("Entered Function",c_n,T_INFO);
		application.disconnect(client);
		avc_logging("Exited Function",c_n,T_INFO);
	}

	client.poll = function()
	{
		client.clientPingLogMessageCounter++;
		//pingLogMessageCounter is set and reset in pollClients method
		if(client.clientPingLogMessageCounter >= T_POLL_TO_LOG_RATIO)
		{
			c_n = "poll:"+client.id+","+client.ip+","+client.name;
			avc_logging("Polled from client. Printed only once in "+T_POLL_TO_LOG_RATIO+" polls.",c_n,T_DEBUG);
			client.clientPingLogMessageCounter = 0;
		}
	}


	client.recordStream=function(isPresenter,streamName,fileName,dispName,isF4V)
	{
		c_n = "recordStream";	
		avc_logging("In recordStream start:: isPresenter :"+isPresenter+" , streamName: "+streamName+" , fileName :"+fileName
		+", dispName: "+dispName+" ,isF4V :"+isF4V,c_n,T_DEBUG);
		isStreamPublishing =false;
		for(i=0;i<sList.length;i++)
		{
			if(sList[i].streamName==streamName)
			{
				isStreamPublishing =true;
				break;
			}
		}
		if(isStreamPublishing)
		{
			avc_logging(" The  stream "+streamName+" is publishing",c_n,T_DEBUG);
			clearInterval(clearTimeOutId);
			timeOutCount =0;
			var tempTime = new Date();
			var obj =new Object();
			obj.fileName=fileName;
			obj.streamName=streamName;
			obj.isPresenter=isPresenter;
			obj.dispName=dispName;
			obj.status="success";
			var videostream;
			var streamObj;
			if(isF4V)
			{
				application.clearStreams("mp4:"+streamName+".f4v");
				videostream = Stream.get("mp4:"+streamName+".f4v");
				streamObj ={videostream:videostream,fileName:fileName,isF4V:isF4V};
				if(isPresenter == "true")
				{
					recordingPresenterFile=streamName+".f4v";
					presenterFilenameForRename = fileName;
					avc_logging(" The  recording file (for presenter)is:  "+recordingPresenterFile,c_n,T_DEBUG);
				}
				else
				{
					recordingViewerFile=streamName+".f4v";
					viewerFilenameForRename = fileName;
					avc_logging(" The  recording file (for viewer)is:  "+recordingViewerFile,c_n,T_DEBUG);
				}
				
			}
			else
			{
				application.clearStreams("flv:"+streamName);
				videostream = Stream.get(streamName);
				streamObj ={videostream:videostream,fileName:fileName,isF4V:isF4V};
				if(isPresenter == "true")
				{
					recordingPresenterFile=streamName+".flv";
					presenterFilenameForRename = fileName;
					avc_logging(" The  recording file (for presenter)is:  "+recordingPresenterFile,c_n,T_DEBUG);
				}
				else
				{
					recordingViewerFile=streamName+".flv";
					viewerFilenameForRename = fileName;
					avc_logging(" The  recording file (for viewer)is:  "+recordingViewerFile,c_n,T_DEBUG);
				}

			}
			
				application.streamArray[streamName] = streamObj; 
				avc_logging("Added to streamArray:FileName:"+application.streamArray[streamName].fileName+" :isF4v :"+
				application.streamArray[streamName].isF4V,c_n,T_DEBUG);
			

			if(application.streamArray[streamName].videostream)
			{
			
				application.streamArray[streamName].videostream.onStatus = function(info)
				{ 
					avc_logging("Stream status: " + info.code,"--Stream Record Status--",T_DEBUG);
				}; 
				avc_logging("Call record method for the stream -"+streamName,c_n,T_DEBUG);
				if(isF4V)
				{
					application.streamArray[streamName].videostream.play(streamName, -1, -1);

				}
				application.streamArray[streamName].videostream.record();
				avc_logging("Stream -"+application.streamArray[streamName].videostream.name +"-started recording",c_n,T_DEBUG);
				client.call("recordingStatus",null,obj);
			}
			else
			{
				avc_logging("Failed in recording the stream: -"+streamName ,c_n,T_DEBUG);
				obj.status="failed";
				client.call("recordingStatus",null,obj);

			}	
		}
		else if(timeOutCount<100)
		{
			avc_logging("Waiting to publish the stream: -"+streamName ,c_n,T_DEBUG);
			timeOutCount++;
			clearInterval(clearTimeOutId);
			clearTimeOutId  = setInterval(client.recordStream,500,isPresenter,streamName,fileName,dispName,isF4V);
		}
		else if(timeOutCount == 100)
		{
			clearInterval(clearTimeOutId);
			timeOutCount =0;
			avc_logging("Waiting to publish the stream expired:"+streamName ,c_n,T_DEBUG);
		}
	}
	client.getFileSize = function(streamName,isF4V,reCalled)
	{
		c_n = "getFileSize";
		avc_logging("StreamName is: "+streamName+" : isF4V:"+isF4V+" : reCalled:"+reCalled ,c_n,T_DEBUG);
		var str =application.name.split("/");
		var streamPath;
		if(reCalled)
		{
			streamPath = "/streams/"+str[1]+"/"+streamName;
		}
		else
		{
			if(isF4V)
				streamPath = "/streams/"+str[1]+"/"+streamName+".f4v";
			else
				streamPath = "/streams/"+str[1]+"/"+streamName+".flv"
		}
		var file=new File(streamPath);
		avc_logging("The  size of the recorded file :( "+ streamPath+") is :"+file.length ,c_n,T_DEBUG);
		return file.length;

	}


	client.flushRecordStream=function(streamName,isF4V)
	{
		c_n = "flushRecordStream";
		avc_logging("In flushRecordStream : , streamName:"+streamName +"  ,isF4V: "+isF4V,c_n,T_DEBUG);
		msg = false;
		if(application.streamArray[streamName] && application.streamArray[streamName].videostream)
		{
			msg =application.streamArray[streamName].videostream.flush();
		}
        avc_logging("Flush status(true means flush success) :"+msg,c_n,T_DEBUG);
		return msg;
	}

	client.stopRecordStream=function(streamName,isF4V)
	{
		c_n = "stopRecordStream";
		avc_logging("In stopRecordStream : streamName:"+streamName +"  ,isF4V: "+isF4V,c_n,T_DEBUG);
		if(isF4V)
		{
			if(recordingPresenterFile == streamName+".f4v")
			{
				recordingPresenterFile="";
				presenterFilenameForRename="";
			}
			else
			{
				recordingViewerFile="";
				viewerFilenameForRename="";
			}
		}
		else
		{
	
			if(recordingPresenterFile == streamName+".flv")
			{
				recordingPresenterFile="";
				presenterFilenameForRename="";
			}
			else
			{
				recordingViewerFile="";
				viewerFilenameForRename="";
			}

		}
		avc_logging("Calling Stop Record."+isF4V,c_n,T_DEBUG);
		stopRecordAndClearStream(streamName,true);
		

	}


	client.lastCall=function()
	{
		c_n = "lastCall";
		avc_logging("Entered & Exited",c_n,T_DEBUG);
	}
	
	avc_logging("Exited Function",c_n,T_DEBUG);
}//End onConnect() 

application.onPublish = function(clientobj,myStream)
{
	c_n = "onPublish, clientName:"+clientobj.name+", Stream:"+myStream.name+", IP:"+clientobj.ip+", id:"+clientobj.id+", discFlag:"+clientobj.disconnectedDuringRetrys;
	avc_logging("Entered Function",c_n,T_DEBUG);
	avc_logging("StreamArray length:" + application.streamArray.length ,"onPublish",T_DEBUG);
	avc_logging("Calling stop record for the previous record for the stream." ,"onPublish",T_DEBUG);
	stopRecordingAndRenamePreviousStream(myStream.name);
	for(i=0;i<sList.length;i++)
	{
		if(sList[i].streamName==myStream.name)
		{
			sList.splice(i,1);
			avc_logging("Removed the old stream( "+myStream.name+" ) from the list.Lenght of stram list array:"+sList.length,c_n,T_INFO);
			break;
		}
	}
	clientUserName = getUserNamefromClientName(myStream.name);
	avc_logging("clientUserName:"+clientUserName,c_n,T_DEBUG);
	clientConnection = null;
 	for(var i=0;i<application.clients.length;i++)
	{
		if(application.clients[i].name==clientUserName)
		{
			clientConnection = application.clients[i];
			break;
		}
	}
	if(clientConnection != null)
	{
		clientConnection.call("startedStream",null,myStream.name);
		avc_logging("Called the startedStream function",c_n,T_INFO);
	}
    var streamNameWithId ={streamName:myStream.name,id:clientobj.id};  
	sList.push(streamNameWithId);
	avc_logging("Added the stream( "+myStream.name+" )to the list. Number of streams are "+sList.length,c_n,T_INFO);

	avc_logging("Exited Function",c_n,T_DEBUG);
} //End onPublish

application.onUnpublish = function(clientobj,myStream)
{
	c_n = "onUnpublish, Stream:"+myStream.name+", IP:"+clientobj.ip+", id:"+clientobj.id+", discFlag:"+clientobj.disconnectedDuringRetrys;
	avc_logging("Entered Function",c_n,T_DEBUG);

	clientUserName = getUserNamefromClientName(myStream.name);
	//Resetting the log context
	c_n = "onUnpublish, Stream:"+myStream.name+", IP:"+clientobj.ip+", id:"+clientobj.id+", discFlag:"+clientobj.disconnectedDuringRetrys;
	avc_logging("length of stream list array:"+sList.length,c_n,T_DEBUG);
	clientConnection = null;

	//We need to send the stopped stream call on the same connection
	//Same connection is identified by the id of the connection. 
	//Name is not not unique as the older connections may be still be pending with the same name.
	for(var i=0;i<application.clients.length;i++)
	{
		if(application.clients[i].id==clientobj.id)
		{
			clientConnection = application.clients[i];
			break;
		}
	}
	
	for(i=0;i<sList.length;i++)
	{
		avc_logging("for loop slist "+sList[i],c_n,T_DEBUG);
		if(sList[i].streamName==myStream.name)
		{
			sList.splice(i,1);
			avc_logging("Removed the stream :" + myStream.name + "from the list.The lenght of stream list array is :"+ sList.length,c_n,T_INFO);
			break;
		}
	}
	//c_n +="Length of c"+streamConnection.length;
	if(clientConnection != null)
	{
		avc_logging("clientConnection"+clientConnection.id,c_n,T_INFO);
		clientConnection.call("stoppedStream",null,myStream.name,application.clients[i].disconnectedDuringRetrys);
		avc_logging("Called the stoppedStream function",c_n,T_INFO);
		avc_logging("Length of c"+streamConnection.length,c_n,T_DEBUG);
	}
	else
	{
		avc_logging("Could not find the matching clientConnection. Connection may be lost. So not calling the stoppedStream function.",c_n,T_INFO);
	}
	
	/*for(var i=0;i<application.clients.length;i++)
	{
		//We need to send the stopped stream call on the same connection
		//Same connection is identified by the id of the connection. 
		//Name is not not unique as the older connections may be still be pending with the same name.
		if(clientobj.id == application.clients[i].id)
		{
			application.clients[i].call("stoppedStream",null,myStream.name,application.clients[i].disconnectedDuringRetrys);
			avc_logging("Called the stoppedStream function",c_n,T_DEBUG);
			break;

		}
	}*/
	avc_logging("Exited Function",c_n,T_DEBUG);
}

Client.prototype.releaseStream=function(myStream)
{}
Client.prototype.FCPublish=function(myStream)
{}
Client.prototype.FCUnpublish=function(myStream)
{}
Client.authorize1 = function(streamname) 
{ 
	c_n = "authorize1";
	avc_logging("Entered Function",c_n,T_DEBUG);
} 
Client.FCSubsribe = function(streamname) 
{ 
	c_n = "FCSubsribe";
	avc_logging("Entered Function",c_n,T_DEBUG);
} 

function getUserNamefromClientName(name)
{
	c_n = "getUserNamefromClientName";
	avc_logging("Entered getUserNamefromClientName Function",c_n,T_INFO);
	bwIndex = name.lastIndexOf(BW_SUFFIX);
	bwDelimIndex = name.lastIndexOf("_");
	
	
	vnIndex = name.lastIndexOf(VIEWER_SUFFIX);
	
	avc_logging("bwIndex:"+bwIndex+", bwDelimIndex:"+bwDelimIndex+",vnIndex  :"+vnIndex+" ,name.length :"+ name.length + ", VIEWER_SUFFIX.length"+VIEWER_SUFFIX.length, c_n,T_INFO);


	//Only if the name ends with Kbps and there is a underscore
	if((bwIndex == (name.length-BW_SUFFIX.length)) && bwDelimIndex != -1)
	{
		clientUserName =  name.slice(0,bwDelimIndex);
	}
	else
	{
		clientUserName = name;
	}

	if((vnIndex == (name.length-VIEWER_SUFFIX.length)) && bwDelimIndex != -1)
	{
		clientUserName =  name.slice(0,bwDelimIndex);
	}
	avc_logging("clientUserName:"+clientUserName,c_n,T_INFO);
	return clientUserName;
}

//
//This function is called during a successful retry. 
//It takes the client name and clientid and searches the existing connections 
//with the same name and different id and close them. 
//These are the previous connection which are already closed but the server may not know about them yet.
//We are expediting the close process, because some times server takes long time to realize the connection is already closed
//Because of this delay, there are several issues on the client side
//
function disconnectPreviousConnections(name,newClientId,retryCounter,newClientIP,newClientHardwareAddress)
{
	c_n = "disconnectPreviousConnections, Name:"+name+": NewId:"+newClientId+": retryCounter:"+retryCounter+": NewIP:"+newClientIP+": NewMacAddress:"+newClientHardwareAddress;
	avc_logging("Entered Function",c_n,T_INFO);
	
	avc_logging("Current number of clients:"+application.clients.length,c_n,T_INFO);

	for (i = 0; i < application.clients.length; i++)
	{
	
		avc_logging("In Loop:"+application.clients[i].name
				+":"+application.clients[i].id
				+":"+application.clients[i].ip
				+": hardwareAddress:"+application.clients[i].hardwareAddress
				,c_n,T_DEBUG);
	
		if(application.clients[i].name == name && application.clients[i].id != newClientId)
		{
			
			if(retryCounter > 0)
			{
				application.clients[i].disconnectedDuringRetrys = true;
			}

			//Bug 5080: Selected viewer video not visible at both sides
			//Some times,during network reconnections, due to timing issues, same node might try to reconnect after successfull reconnection
			//In the at case we will close the client connection silently
			if(application.clients[i].hardwareAddress != newClientHardwareAddress)
			{
				application.clients[i].call("duplicateLogin",null,newClientIP);
			}
			
			disconnectConnectionO(application.clients[i]);
			
			avc_logging("DisconnectIntervalId:"+application.clients[i].intervalId,c_n,T_DEBUG);

		}
	}
	
	avc_logging("Exited Function",c_n,T_INFO);
}


//Same as above client.disconnectConnection method. But this also disables the timer.
//Takes in the oldClient as the parameter.
function disconnectConnectionO(oldClient)
{
	c_n = "disconnectConnectionO Client:"+oldClient.id+","+oldClient.ip+","+oldClient.name;
	
	avc_logging("Entered Function",c_n,T_INFO);
	
	clearInterval(oldClient.intervalId);
	
	avc_logging("Called clear interval",c_n,T_INFO);

	application.disconnect(oldClient);
	avc_logging("Exited Function",c_n,T_INFO);
}

//This function is pinging the client to see if the client is alive or not
//If the client is not alive, it initiates the disconnection process
//This cuts down the time for server to realize a lost client to max of the timer interval (10secs)
function pollClients()
{
	for (i = 0; i < application.clients.length; i++)
	{
		application.clients[i].ping();
	}
	/*
	c_n = "pollClients";
	allActive = true;
	numDisconnected = 0;
	
	pingLogMessageCounter++;
	
	for (i = 0; i < application.clients.length; i++)
	{
		if(!application.clients[i].ping())
		{
			
			avc_logging("Client is not live. Disconnecting the client: "+application.clients[i].id+","+application.clients[i].ip+","+application.clients[i].name,
			c_n,
			T_INFO);
			application.disconnect(application.clients[i]);
			allActive = false;
			numDisconnected++;
		}
	}
	if(!allActive)
	{
		avc_logging("All clients are not active. "+numDisconnected+" clients are disconnected.",c_n,T_DEBUG);
	}
	else if(application.clients.length > 0)
	{
		if(pingLogMessageCounter >= T_POLL_TO_LOG_RATIO)
		{
			avc_logging("All clients are active. Printed only once for "+T_POLL_TO_LOG_RATIO+" polls.",c_n,T_DEBUG);
			pingLogMessageCounter = 0;
		}
	}
	*/
}
application.onDisconnect = function(client)
{
	 
	c_n = "onDisconnect";
	avc_logging("Client:- Id:"+client.id+",Ip: "+client.ip+", Name:"+client.name+", Stream List length: "+sList.length
	,c_n,T_DEBUG);
	// if onDisconnect is calling after publishing.
	if(sList.length!= 0)
	{
		var previousStreamExistAndStopped = false;
		for(i=0;i<sList.length;i++)
		{
			avc_logging("for loop slist "+sList[i].streamName,c_n,T_DEBUG);
			if(sList[i].streamName==client.name ||sList[i].streamName==client.name+"_VIEWER")
			{
				
				if(sList[i].id!=client.Id)
				{
					avc_logging("Previous recording renamed already",c_n,T_DEBUG);
					return;
				
				}
				else
				{
					previousStreamExistAndStopped = true;
					avc_logging("Removing the old stream( "+ sList[i].streamName +" ) from the list.Lenght of stream list array: "+sList.length ,c_n,T_INFO);
					sList.splice(i,1);
					stopRecordingAndRenamePreviousStream(client.name);
				}
				break;
			}
		}
		if(previousStreamExistAndStopped == false)
		{
			stopRecordingAndRenamePreviousStream(client.name);
		}
	}
	else
	{
		stopRecordingAndRenamePreviousStream(client.name);
	}
	
	
}
function stopRecordingAndRenamePreviousStream(streamName)
{
	c_n = "stopRecordingAndRenamePreviousStream";
	avc_logging("The The stream is: "+streamName,c_n,T_DEBUG)
	var presenterStream="";
	var presenterStreamExtnsn="";
	var viewerStream="";
	var viewerStreamExtnsn="";
	if(recordingPresenterFile!="")
	{
		presenterStream = recordingPresenterFile.substr(0,recordingPresenterFile.length-4);
		presenterStreamExtnsn = recordingPresenterFile.substr(recordingPresenterFile.length-4);
		avc_logging("The previous reorded file :"+recordingPresenterFile+",UserType:Presenter , File extention: "+presenterStreamExtnsn,c_n,T_DEBUG);
	}
	if(recordingViewerFile!="")
	{
		viewerStream = recordingViewerFile.substr(0,recordingViewerFile.length-4);
		viewerStreamExtnsn = recordingViewerFile.substr(recordingViewerFile.length-4);
		avc_logging("The previous reorded file :"+recordingViewerFile+",UserType:Viewer , File extention: "+viewerStreamExtnsn,c_n,T_DEBUG);
	}
	
	var str =application.name.split("/");
	var streamPath = "/streams/"+str[1]+"/";
	var sourseFilleName; 
	var destinationFileName;
	
	
   
    if(streamName == presenterStream)
	{
		sourseFilleName = streamPath +recordingPresenterFile;
		destinationFileName=streamPath +presenterFilenameForRename;
		stopRecordAndRenameTheStream(streamName,sourseFilleName,destinationFileName);
	}
	else if(streamName == viewerStream || streamName+"_VIEWER" == viewerStream)
	{
		sourseFilleName = streamPath +recordingViewerFile;
		destinationFileName=streamPath +viewerFilenameForRename;
		stopRecordAndRenameTheStream(viewerStream,sourseFilleName,destinationFileName);

	}
}
function stopRecordAndRenameTheStream(streamName,sourseFilleName,destinationFileName)
{
	c_n = "stopRecordAndRenameTheStream";
	avc_logging("Going to call stopRecord and rename the stream(previous stream) :" + streamName,c_n,T_DEBUG);
	stopRecordAndClearStream(streamName,false);
	renameRecordedStream(sourseFilleName ,destinationFileName);
	recordingPresenterFile="";
	presenterFilenameForRename="";
}
function stopRecordAndClearStream(streamName, needToClearStream)
{
		c_n = "stopRecordAndClearStream";
		avc_logging("The stream :" + streamName,c_n,T_DEBUG);
		if(application.streamArray[streamName] && application.streamArray[streamName].videostream)
		{
			application.streamArray[streamName].videostream.flush();
			avc_logging("Calling stop record for the stream :" + streamName+" isF4v :"+application.streamArray[streamName].isF4V,c_n,T_DEBUG);
			msg=application.streamArray[streamName].videostream.record(false);
			avc_logging("Called stop record for the stream :" + streamName +"  result : "+msg,c_n,T_DEBUG);
			if(application.streamArray[streamName].isF4V)
			{
				application.streamArray[streamName].videostream.play(false); 
				if(needToClearStream== true)
				{
					msg = application.clearStreams("mp4:"+streamName+".f4v");
					avc_logging("Clearing stream mp4:"+streamName+".f4v:"+msg,c_n,T_INFO);
				}
			}
			else
			{
				if(needToClearStream== true)
				{
					msg = application.clearStreams("flv:/"+streamName)
					avc_logging("Clearing stream flv:/"+streamName+":"+msg,c_n,T_INFO);
				}
			}
			delete application.streamArray[streamName];
			avc_logging("Deleted the stream :" + streamName+": from stramArray.",c_n,T_DEBUG);
		}
}
function renameRecordedStream(source,newName)
{
	c_n = "renameRecordedStream";
	avc_logging("Source:" + source +" newName :  "+newName,c_n,T_DEBUG);
	var file = new File(source);
	if(file.exists)
	{
		if(file.copyTo(newName))
		{
			avc_logging("Renamed and removed the file: " +source+ ", the size of the file is :"+file.length +" bytes",c_n,T_DEBUG);
			file.remove();
		}
		else
		{
			avc_logging("Failed to rename file: " + source+", the size of the file is :"+file.length +" bytes",c_n,T_DEBUG);
		}
	}
	else
	{
		avc_logging("The file  (" + source+") is   not existing.",c_n,T_DEBUG);
	}
}
function t_curr_time(){
	//get date info from system
	var mydate_ist = new Date();
	var hrs_ist = mydate_ist.getHours();
	var mins_ist = mydate_ist.getMinutes();
	var secs_ist = mydate_ist.getSeconds();
	var milli_ist = mydate_ist.getMilliseconds();

	//put zeros where needed
	if (hrs_ist<10) {
	     hrs_ist = "0" + hrs_ist;
	}
	
	if (mins_ist<10) {
	     mins_ist = "0" + mins_ist;
	}
	
	if (secs_ist<10) {
	     secs_ist = "0" + secs_ist;
	}
	
	if (milli_ist<100) {
	     milli_ist = "0" + milli_ist;
	} else if (milli_ist<10) {
	     milli_ist = "00" + milli_ist;
	}
	//send to text field
	T_CURR_TIME = hrs_ist+":"+mins_ist+":"+secs_ist+":"+milli_ist;
}