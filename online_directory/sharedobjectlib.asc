
var sharedObjectArray = new Object();
var NUMERIC = "NUMERIC";
var DATE = "DATE";
var autoKey = new Object();

Client.prototype.setValue = function(sharedObjectName,propertyName,propertyValue)
{
	c_n = "setValue:"+sharedObjectName+","+propertyName;
	if(sharedObjectArray[sharedObjectName]==null)
	{
		sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
	}
	sharedObjectArray[sharedObjectName].setProperty(propertyName,propertyValue);
	avc_logging("Set shared object property",c_n,T_INFO);
}

/*
Client.prototype.getValue = function(sharedObjectName,propertyName)
{
	c_n = "getValue:"+sharedObjectName;
	if(sharedObjectArray[sharedObjectName]==null)
	{
		sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
	}
	var propertyValue = sharedObjectArray[sharedObjectName].getProperty(propertyName);
	avc_logging("get shared object property",c_n,T_INFO);
	return propertyValue;
}
*/
Client.prototype.addValue = function(sharedObjectName,auto,propertyValue)
{
	c_n = "addValue:"+sharedObjectName+","+auto;

	if(sharedObjectArray[sharedObjectName]==null)
	{
		sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
	}
	var propertyName = "";
	if(auto == NUMERIC)
	{
		propertyName = getNextNumericPropertyName(sharedObjectName);
	}
	else
	{
		propertyName = new Date().getTime();
	}
	var newValue = new Object();
	newValue["autoPropertyName"] = propertyName;
	newValue["propertyValue"] = propertyValue;
	propertyValue["timestamp"] = getTimeStamp();
	//newValue["timestamp"] = getTimeStamp();
	avc_logging("addValue:timestamp:"+propertyValue["timestamp"],c_n,T_INFO);
	sharedObjectArray[sharedObjectName].setProperty(propertyName,newValue);

	avc_logging("Added shared object property with propertyName:"+propertyName,c_n,T_INFO);
}

Client.prototype.removeValue = function(sharedObjectName,propertyName)
{
	c_n = "removeValue:"+sharedObjectName+","+propertyName;

	if(sharedObjectArray[sharedObjectName]==null)
	{
		sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
	}
	sharedObjectArray[sharedObjectName].setProperty(propertyName,null);
	avc_logging("Removed shared object property",c_n,T_INFO);
}

Client.prototype.removeAllValues = function(sharedObjectName)
{
	c_n = "removeAllValues:"+sharedObjectName;

	if(sharedObjectArray[sharedObjectName]==null)
	{
		sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
	}
	sharedObjectArray[sharedObjectName].clear();		
	avc_logging("Removed all shared object values",c_n,T_INFO);
}

Client.prototype.lockCollaboration = function(sharedObjectName)
{
	c_n = "lockCollaboration:"+sharedObjectName;
	if(sharedObjectArray[sharedObjectName]==null)
	{
		sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
	}
	sharedObjectArray[sharedObjectName].lock();
	avc_logging("Shared object locked",c_n,T_INFO);
}

Client.prototype.flushCollaboration = function(sharedObjectName)
	{
		c_n = "lockCollaboration:"+sharedObjectName;
		if(sharedObjectArray[sharedObjectName]==null)
		{
			sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
		}
		sharedObjectArray[sharedObjectName].flush();
		avc_logging("Shared object flushed",c_n,T_INFO);
}

Client.prototype.unlockCollaboration = function(sharedObjectName)
{
	c_n = "unlockCollaboration:"+sharedObjectName;
	if(sharedObjectArray[sharedObjectName]==null)
	{
		sharedObjectArray[sharedObjectName]=SharedObject.get(sharedObjectName);
	}
	sharedObjectArray[sharedObjectName].unlock();
	avc_logging("Shared object un-locked",c_n,T_INFO);
}

function getNextNumericPropertyName(sharedObjectName)
{
	var val = autoKey[sharedObjectName];
	if(val != null)
	{
		val++;
	}
	else
	{
		val =  1;
	}
	autoKey[sharedObjectName] = val;
	return val;
}

function getTimeStamp()
{
	//get date info from system
	var mydate_ist = new Date();
	// Correct the single digit hr / min / sec to read as "0n" instead of "n"	start	SRS
	var hrs ;
	var mins ;
	var secs ;
	if (mydate_ist.getHours() < 10)
	{
		hrs = "0" + mydate_ist.getHours();
	}
	else
	{
		hrs = "" + mydate_ist.getHours();
	}

	if (mydate_ist.getMinutes() < 10)
	{
		mins = "0" + mydate_ist.getMinutes();
	}
	else
	{
		mins = "" + mydate_ist.getMinutes();
	}
	if (mydate_ist.getSeconds() < 10)
	{
		secs = "0" + mydate_ist.getSeconds();
	}
	else
	{
		secs = "" + mydate_ist.getSeconds();
	}
	var timestamp = "(" + hrs + ":" + mins + ":" + secs + "): ";
	trace("timestamp:" + timestamp);
	//return "(" + hrs + ":" + mins + ":" + secs + "): ";
	return timestamp;
	// Correct the single digit hr / min / sec to read as "0n" instead of "n"	end	SRS
}
/*
Client.prototype.clearAllSharedObjects = function(userName)
{
	trace("clearAllSharedObjects:userName:" + userName);
	
	for each (var sharedObject in sharedObjectArray)
	{
		if (Client.prototype.getValue(sharedObject, userName))
		{
			trace("setting the shared object value to null:sharedObjectName: " + sharedObject.name + ", userName: " + userName);
			Client.prototype.setValue(sharedObject, userName, null);
		}
	}
}
*/