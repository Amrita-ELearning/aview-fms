Client.prototype.initiateChatSession = function(chatSessionVO,inviteOwner)
{
	var c_n = "initiateChatSession";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId 
	+ ",moderator:" + chatSessionVO.owner.userName + ",members:" + chatSessionVO.members.length+", inviteOwner:"+inviteOwner,c_n,T_INFO);

	updateActiveSessions(chatSessionVO);
	
	//Regular scenario, where the owner is inviting members
	if(!inviteOwner)
	{
		//store the chatSessionVO for moderator
		avc_logging("storing the chatSessionVO for moderator:" + chatSessionVO.owner.userName,c_n,T_INFO) ;
		addUserChatSession(chatSessionVO.owner.userName, chatSessionVO.chatSessionId);

		//store the chatSessionVO for all members
		addMembersToChatSessionAndInvite(chatSessionVO.members, chatSessionVO);
	}
	//Special scenario, where the member is inviting the owner, happens in PrivateChat case only..
	else
	{
		//store the chatSessionVO for inviter
		avc_logging("storing the chatSessionVO for moderator:" + chatSessionVO.owner.userName,c_n,T_INFO) ;
		addUserChatSession(chatSessionVO.members[0].member.userName, chatSessionVO.chatSessionId);

		//store the chatSessionVO for owner
		addUserToChatSessionAndInvite(chatSessionVO.owner.userName, chatSessionVO);;
	}
}

Client.prototype.populateChatSessionAfterReconnection = function(chatSessionVO)
{
	var c_n = "populateChatSessionAfterReconnection";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId 
	+ ",moderator:" + chatSessionVO.owner.userName + ",members:" + chatSessionVO.members.length,c_n,T_INFO);

	updateActiveSessions(chatSessionVO);
	
	//store the chatSessionVO for moderator
	avc_logging("storing the chatSessionVO for moderator:" + chatSessionVO.owner.userName,c_n,T_INFO) ;
	addUserChatSession(chatSessionVO.owner.userName, chatSessionVO.chatSessionId);

	//store the chatSessionVO for all members
	for (var i=0; i < chatSessionVO.members.length; i++)
	{
		//store the chatSessionVO for the user
		addUserChatSession(chatSessionVO.members[i].member.userName, chatSessionVO.chatSessionId);
	}
}

Client.prototype.endChatSession = function(chatSessionVO)
{
	var c_n = "endChatSession";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId 
	+ ",moderator:" + chatSessionVO.owner.userName + ",members:" + chatSessionVO.members.length,c_n,T_INFO);
	
	//remove chatSessionVO for moderator
	removeUserChatSession(chatSessionVO.chatSessionId, chatSessionVO.owner.userName);
	
	var members = chatSessionVO.members;
	for (var i=0; i < members.length; i++)
	{
		//remove the chatSessionVO for the user
		removeUserChatSession(chatSessionVO.chatSessionId, members[i].member.userName);
		
		for (var j=0; j < application.clients.length; j++)
		{
			var currClient = application.clients[j];
			if(currClient.name == members[i].member.userName)
			{
				currClient.call("endChatSession", null, chatSessionVO.chatSessionId);
				avc_logging("chat session ended on client " + currClient.name,c_n,T_INFO);
			}
		}
	}
	
	//remove chat session details
	delete application.activeChatSessions[chatSessionVO.chatSessionId];
}

//this is called from the client when the moderator chooses to add one/more newMembers to chat.
Client.prototype.addChatMembers = function(chatSessionVO, newMembers)
{
	var c_n = "addChatMembers";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId + ",moderator:" 
	+ chatSessionVO.owner.userName + ",newMembers:" + newMembers.length,c_n,T_INFO);
	
	addMembersToChatSessionAndInvite(newMembers, chatSessionVO);
	
	updateActiveSessions(chatSessionVO);
}

//this is called from the client when the member chooses to quit the chat session.
Client.prototype.quitChatSession = function(chatSessionVO, moderatorName, userName)
{
	var c_n = "quitChatSession";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId + ",moderatorName:" + moderatorName + ",userName:" + userName,c_n,T_INFO);
	
	removeUserChatSession(chatSessionVO.chatSessionId, userName);
	
	updateActiveSessions(chatSessionVO);
}

//this is called from the client when the moderator chooses to delete one/more members from chat.
Client.prototype.deleteChatMembers = function(chatSessionVO, deletedMembers)
{
	var c_n = "deleteChatMembers";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId + ",deletedMembers:" + deletedMembers.length,c_n,T_INFO);
	for (var i = 0; i < deletedMembers.length; i++)
	{
		removeUserChatSession(chatSessionVO.chatSessionId, deletedMembers[i].member.userName);
		for (var j = 0; j < application.clients.length; j++)
		{
			if (application.clients[j].name == deletedMembers[i].member.userName)
			{
				application.clients[j].call("removedByModerator", null, chatSessionVO.chatSessionId);
				
				avc_logging("calling removedByModerator on member to remove him from chat session:" 
				+ application.clients[j].name,c_n,T_INFO);
			}
		}
	}
	//update the members in application.activeChatSessions
	updateActiveSessions(chatSessionVO);
}

function addUserChatSession(userName, chatSessionId)
{
	var c_n = "addUserChatSession";
	avc_logging("userName:" + userName+", chatSessionId:"+chatSessionId,c_n,T_INFO);
	if (application.userChatSessions == null)
	{
		application.userChatSessions = new Object;
		avc_logging("creating application.userChatSessions:" + objectLength(application.userChatSessions),c_n,T_INFO);
	}
	
	
	//avc_logging("application.userChatSessions[userName]:" + application.userChatSessions[userName],c_n,T_INFO);
	if (application.userChatSessions[userName] == null)
	{
		avc_logging("creating activeChatSession for user:" + userName,c_n,T_INFO);
		application.userChatSessions[userName] = new Object;
	}
	avc_logging("adding chatSessionId "+chatSessionId+" for user:" + userName,c_n,T_INFO);
	application.userChatSessions[userName][chatSessionId] = chatSessionId;
}

function removeUserChatSession(chatSessionId, userName)
{
	var c_n = "removeUserChatSession";
	avc_logging("userName:" + userName,c_n,T_INFO);
	delete application.userChatSessions[userName][chatSessionId];
}

function addMembersToChatSessionAndInvite(members, chatSessionVO)
{
	var c_n = "addMembersToChatSessionAndInvite";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId + ", moderator:" + chatSessionVO.owner.userName 
	+ ", new members:" +members.length+ ", total members:" + chatSessionVO.members.length,c_n,T_INFO);
	
	for (var i=0; i < members.length; i++)
	{
		//store the chatSessionVO for the user
		addUserToChatSessionAndInvite(members[i].member.userName, chatSessionVO);
	}
}

function addUserToChatSessionAndInvite(userName, chatSessionVO)
{
	var c_n = "addUserToChatSessionAndInvite";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId + ", userName:" + userName,c_n,T_INFO);
	
	//store the chatSessionVO for the user
	addUserChatSession(userName, chatSessionVO.chatSessionId);

	for (var j=0; j < application.clients.length; j++)
	{
		var currClient = application.clients[j];
		if(currClient.name == userName)
		{
			application.clients[j].call("startChatSession", null, chatSessionVO);
			avc_logging("chat invitation sent to " + currClient.name,c_n,T_INFO);
		}
	}
}


function updateActiveSessions(chatSessionVO)
{
	var c_n = "updateActiveSessions";
	avc_logging("chatSessionId:" + chatSessionVO.chatSessionId 
	+ ",moderator:" + chatSessionVO.owner.userName + ",members:" + chatSessionVO.members.length,c_n,T_INFO);
	//store the chat session details
	if (application.activeChatSessions == null)
	{
		application.activeChatSessions = new Object;
	}

	avc_logging("Current application.activeChatSessions:" + objectLength(application.activeChatSessions),c_n,T_INFO) ;
	application.activeChatSessions[chatSessionVO.chatSessionId] = chatSessionVO;
}

function onAppStartChat()
{
	//store the chat session details
	application.activeChatSessions = null;
	//store the chat session id for each member in the chat session
	application.userChatSessions = null;
}

function onConnectChat(client)
{

	if (application.userChatSessions && application.userChatSessions[client.name])
	{
		trace("active chat sessions for user:" + client.name + application.userChatSessions[client.name]);
		var activeChatSessions = new Object;
		for each (var chatSessionId in application.userChatSessions[client.name])
		{
			trace("user chatSessionId:" + chatSessionId);
			activeChatSessions[chatSessionId] = application.activeChatSessions[chatSessionId];
		}
		trace("application.activeChatSessions[chatSessionId]:" + application.activeChatSessions[chatSessionId]);
		client.call("activeChatSessions", null, activeChatSessions);
	}
}

function objectLength(myObject) 
{
 var cnt=0;

 for each (var s in myObject) cnt++;

 return cnt;
}