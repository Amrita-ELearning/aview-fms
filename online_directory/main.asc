var T_DEBUG = 1;
var T_INFO = 2;
var T_CURR_TIME = "";
//For trace statements, this level and all levels above will be used
var T_TRACE_LEVEL = T_DEBUG;
var T_PING_INTERVAL = 2000;
var T_POLL_TO_LOG_RATIO = 100;

function avc_logging(trace_message, caller_name, trace_level)
{
	if (trace_level >= T_TRACE_LEVEL){
		t_curr_time();
		trace("<"+T_CURR_TIME+ ">\tUSER\t[" + caller_name + "]:\t" + trace_message);
	}
}

load("sharedobjectlib.asc");
load("chat_session.asc");

application.onAppStart = function()
{
	application.activeUsersSharedObject = SharedObject.get("users_so", false);
	trace("online_directoryapplication:onAppStart");
	//array that stores meeting invitation for all users
	application.meetingInvitations=new Object();
	onAppStartChat();
	setInterval(pollClients,T_PING_INTERVAL);
	application.connectedClients=new Object();
}

application.onConnect = function(client,name,hardwareAddress,retryCounter)
{
  client.hardwareAddress=hardwareAddress;
  
	if(name)
	{
		//Explicitly close the previous connections on the same user name
		//So that in case duplicate login we want to close the earlier login with a message
		disconnectPreviousConnections(name,client,retryCounter);
		
	} 
	application.acceptConnection(client);
	
	//Cleanup method, to be called at the end of application close
	client.disconnectConnection=function()
	{
		var c_n = "disconnectConnection Client:"+client.id+","+client.ip+","+client.name+":";
		avc_logging("Entered Function",c_n,T_INFO);
		application.disconnect(client);
		avc_logging("Exited Function",c_n,T_INFO);
		application.connectedClients[client.name]=null;
	}
	

	if(application.name.indexOf("/ConnectionTester") != -1)
	{
		avc_logging("Connection testing is successful: client connected. name:"+name+" id:"+client.id+","+client.ip+", appName:"+application.name,"online_directory",T_INFO);
		return;
	}
	
	avc_logging("client connected. name:"+name+" id:"+client.id+","+client.ip,"online_directory",T_INFO);
	avc_logging("onConnect:application.userChatSessions:" + application.userChatSessions, T_INFO);
	client.name = name;
	client.clientPingLogMessageCounter = 0;
	application.connectedClients[client.name]=client;
	
	onConnectChat(client);
	
	client.endSession= function(userNames)
	{
	    for(i=0;i<userNames.length;i++)
		{
		    if(application.connectedClients[userNames[i]]!=null)
			{
				trace ("endSession call sent");
				application.connectedClients[userNames[i]].call("onEndSession",null);
			}
			 
		}
	}
	client.refreshSharedGroups=function(receivers)
	{
               
	    for(i=0;i<receivers.length;i++)
	    {
               if(application.connectedClients[receivers[i]]!=null) 
		{
                     application.connectedClients[receivers[i]].call("refreshSharedGroups",null);
		}
            }
	}
	client.poll=function()
	{
		client.clientPingLogMessageCounter++;
		if(client.clientPingLogMessageCounter >= T_POLL_TO_LOG_RATIO)
		{
			c_n = "poll:"+client.id+","+client.ip+","+client.name;
			avc_logging("Polled from client. Printed only once in "+T_POLL_TO_LOG_RATIO+" polls.",c_n,T_DEBUG);
			client.clientPingLogMessageCounter = 0;
		}
	}
	
	
	client.sendInvitation = function(invitationDetails)
	{	
		 for(var i=0;i<invitationDetails.length;i++)
		 {
			if(application.connectedClients[invitationDetails[i].userName]!=null)
			{
				trace("invitation sent to userName:"+invitationDetails[i].userName);
		       	application.connectedClients[invitationDetails[i].userName].call("showInvitation",null,invitationDetails[i]);
			}
		 }
	   
	}
	
}

function pollClients()
{
	for (i = 0; i < application.clients.length; i++)
	{
		application.clients[i].ping();
	}
}

application.onDisconnect=function(client)
{
	if(client.isDuplicateLogin==true)
	  return;
	
	application.activeUsersSharedObject.setProperty(client.name,null);

    avc_logging("OnDisconnect:"+client.name,"online_directory",T_INFO);
}

function disconnectPreviousConnections(name,newClient,retryCounter)
{
   c_n = "disconnectPreviousConnections, Name:"+name+": NewId:"+newClient.id+": retryCounter:"+retryCounter+": NewIP:"+newClient.ip+": NewMacAddress:"+newClient.hardwareAddress;
	
	avc_logging("Entered Function Current number of clients:"+application.clients.length,c_n,T_INFO);

	for (i = 0; i < application.clients.length; i++)
	{	
		if(application.clients[i].name == name && application.clients[i].id != newClient.id)
		{
			var userProperty = application.activeUsersSharedObject.getProperty(name);
			if(retryCounter > 0)
			{
				application.clients[i].disconnectedDuringRetrys = true;
			}
				
			avc_logging("Calling the duplicate login call back function:"
				+": id:"+application.clients[i].id
				+": ip:"+application.clients[i].ip
				+": hardwareAddress:"+application.clients[i].hardwareAddress
				+": name:"+application.clients[i].name
				+": retryDisconnect:"+application.clients[i].disconnectedDuringRetrys
				,c_n,T_DEBUG);

			if(userProperty)
			{
			    application.clients[i].isDuplicateLogin=true;
				application.clients[i].call("duplicateLogin",null,newClient.ip);
			}
			
			//This is just to make sure that server dispatches the above client call, before disconnecting the client
			avc_logging("Setting the 1 second interval:",c_n,T_DEBUG);
			
			application.clients[i].intervalId = setInterval(disconnectConnectionO,1000,application.clients[i]);
			
			avc_logging("DisconnectIntervalId:"+application.clients[i].intervalId,c_n,T_DEBUG);

		}
	}
}

function disconnectConnectionO(oldClient)
{
	c_n = "disconnectConnectionO Client:"+oldClient.id+","+oldClient.ip+","+oldClient.name;
	
	avc_logging("Entered Function",c_n,T_INFO);
	
	clearInterval(oldClient.intervalId);
	
	avc_logging("Called clear interval",c_n,T_INFO);

	application.disconnect(oldClient);
	avc_logging("Exited Function",c_n,T_INFO);
}

function t_curr_time(){
	//get date info from system
	var mydate_ist = new Date();
	var hrs_ist = mydate_ist.getHours();
	var mins_ist = mydate_ist.getMinutes();
	var secs_ist = mydate_ist.getSeconds();
	var milli_ist = mydate_ist.getMilliseconds();

	//put zeros where needed
	if (hrs_ist<10) {
	     hrs_ist = "0" + hrs_ist;
	}
	
	if (mins_ist<10) {
	     mins_ist = "0" + mins_ist;
	}
	
	if (secs_ist<10) {
	     secs_ist = "0" + secs_ist;
	}
	
	if (milli_ist<100) {
	     milli_ist = "0" + milli_ist;
	} else if (milli_ist<10) {
	     milli_ist = "00" + milli_ist;
	}
	//send to text field
	T_CURR_TIME = hrs_ist+":"+mins_ist+":"+secs_ist+":"+milli_ist;
}