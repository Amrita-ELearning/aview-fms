var T_DEBUG = 1;
var T_INFO = 2;
var T_CURR_TIME = "";
//For trace statements, this level and all levels above will be used
var T_TRACE_LEVEL = T_DEBUG;
var T_PING_INTERVAL = 2000;
var T_POLL_TO_LOG_RATIO = 100;
//This counter is used to log the All clients live message only once for T_POLL_TO_LOG_RATIO times
//var pingLogMessageCounter = 0;

var FLIX_SUFFIX = "_flix";
var BW_SUFFIX = "Kbps";


//var fileName="";

function avc_logging(trace_message, caller_name, trace_level)
{
	if (trace_level >= T_TRACE_LEVEL){
		t_curr_time();
		trace("<"+T_CURR_TIME+ ">\tPretesting\t[" + caller_name + "]:\t" + trace_message);
	}
}


application.onAppStart = function ()
{
	c_n = "onAppStart";
	avc_logging("Entered Function",c_n,T_DEBUG);
	trace ("***application start");
	avc_logging("Exited Function",c_n,T_DEBUG);
};  


application.onConnect = function(client)
{
	
	application.acceptConnection(client);
	trace("connect: " + client.id);
	c_n = "onConnect, Client.id:"+client.id;
	avc_logging("onConnect Entered Function",c_n,T_DEBUG);
	client.fileName="";
	client.recording=function(userName,tempFileName)
	{
		client.fileName=tempFileName;
		c_n=" recording username : "+userName+",tempFileName :"+tempFileName+",client.fileName : "+client.fileName;
		avc_logging("Entered Function",c_n,T_INFO);
		client.s=Stream.get(userName);
		if(client.s)
		{
			c_n=" recording stream found";
			trace(userName+" rec")
			client.s.record();
		}
		avc_logging("recording Exited Function userName "+userName,c_n,T_INFO);
	}

	client.stopRecording=function(userName,folderName)
	{
		c_n=" stopRecording username : "+userName+",folderName :"+folderName;
		avc_logging("Entered Function",c_n,T_INFO);
		if(client.fileName!="")
		{
			c_n=" file name exist , fileName : "+client.fileName+", userName : "+userName;
			avc_logging("Entered Function fileName : ",c_n,T_INFO);
			trace("stop rec"+client.fileName+" "+userName)
			client.s.flush();
			client.s.record(false);
		var errorLog = new File("streams/"+folderName+"/"+userName+".flv");
			var tempD=new File("streams/"+folderName+"/"+client.fileName+".flv");
			var errorLog1 = "streams/"+folderName+"/"+client.fileName+".flv";
     
		if(tempD.exists)
		{
				c_n=" file exist for removal "+userName;
			tempD.remove();
			trace("temp exists");
		}
		else
		{
				c_n=" file not exist for removal "+userName;
			trace("temp not");
		}
			avc_logging("Checking existence of file tempD : ",c_n,T_INFO);
            if(errorLog.exists)			
			{    
				if(errorLog.copyTo(errorLog1))
		     {
					c_n=" File succesfully copied to location "+userName;
		 	trace("copy suc");
		     }
	       		else
				{
					c_n=" File doesnt exist "+userName;	
		 	trace("no file");
		    }
		trace("file exist")
		}
		else
			{
			trace("file not found");
			}
			avc_logging("stopRecording Exiting function ",c_n,T_INFO);
		}
	}

	client.deleteFile=function(userName,folderName,streamNames)
	{
		c_n=" deleteFile userName: "+userName+",folderName :"+folderName;
		avc_logging("Entered Function",c_n,T_INFO);
		var tempD=new File("streams/"+folderName+"/"+userName+".flv");
		if(tempD.exists)
		{
			c_n=" File with username will be deleted "+userName;
			tempD.remove();
			trace("temp exists deleteFile");
		}
		else
		{
			c_n=" File with username not exist "+userName;
			trace("temp not deleteFile");
		}
		avc_logging("File deletion ",c_n,T_INFO);
		for(i=0;i<streamNames.length;i++)
		{
			var tempD=new File("streams/"+folderName+"/"+streamNames[i]+".flv");
			c_n+=" streamNames flv File  "+"/"+streamNames[i];
			if(tempD.exists)
			{
				c_n+=" streamNames File exist for removal ";
				tempD.remove();
				trace("temp exists deleteFile");
			}
			else
			{
				c_n+=" streamNames File doesnt exist for removal ";
				trace("temp not deleteFile");
			}

		}
		avc_logging("File deletion flv",c_n,T_INFO);
		for(i=0;i<streamNames.length;i++)
		{
			var tempD=new File("streams/"+folderName+"/"+streamNames[i]+".f4v");
			c_n+=" streamNames f4v File  "+"/"+streamNames[i];
			if(tempD.exists)
			{
				c_n+=" streamNames File exist for removal ";
				tempD.remove();
				trace("temp exists deleteFile");
			}
			else
			{
				c_n+=" streamNames File doesnt exist for removal ";
				trace("temp not deleteFile");
			}

		}
		avc_logging("File deletion f4v",c_n,T_INFO);
	}

	client.flixUser=function(flixUsername)
	{
		c_n = "flixUser";
		avc_logging("Flix UserName:"+flixUsername+", Client:"+client.id+", IP:"+client.ip,c_n,T_INFO);
		client.name = flixUsername+FLIX_SUFFIX;
	}
		
}


application.onPublish = function(client, myStream)
{
	c_n = "onPublish , Client.id:"+client.id+", myStream.name "+myStream.name;
	avc_logging("Entered Function",c_n,T_DEBUG);
	trace("publish: "+myStream.name);
}


application.onUnpublish = function(client, myStream)
{
	c_n = "onUnpublish , Client.id:"+client.id+", myStream.name "+myStream.name;
	avc_logging("Entered Function",c_n,T_DEBUG);
	trace("Unpublish: ");
}


application.onDisconnect = function (clientObj)
{
	c_n = "onDisconnect ";
	avc_logging("Entered Function",c_n,T_DEBUG);
	trace("discnt: ");
}

function t_curr_time(){
	//get date info from system
	var mydate_ist = new Date();
	var hrs_ist = mydate_ist.getHours();
	var mins_ist = mydate_ist.getMinutes();
	var secs_ist = mydate_ist.getSeconds();
	var milli_ist = mydate_ist.getMilliseconds();

	//put zeros where needed
	if (hrs_ist<10) {
	     hrs_ist = "0" + hrs_ist;
	}
	
	if (mins_ist<10) {
	     mins_ist = "0" + mins_ist;
	}
	
	if (secs_ist<10) {
	     secs_ist = "0" + secs_ist;
	}
	
	if (milli_ist<100) {
	     milli_ist = "0" + milli_ist;
	} else if (milli_ist<10) {
	     milli_ist = "00" + milli_ist;
	}
	//send to text field
	T_CURR_TIME = hrs_ist+":"+mins_ist+":"+secs_ist+":"+milli_ist;
}

