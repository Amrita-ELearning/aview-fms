
var T_DEBUG = 1;
var T_INFO = 2;
var T_CURR_TIME = "";
var T_SYS_TIME = "";
//For trace statements, this level and all levels above will be used
var T_TRACE_LEVEL = T_DEBUG;
var T_PING_INTERVAL = 2000;
var T_POLL_TO_LOG_RATIO = 100;

var MODERATOR_ROLE = "MODERATOR";
var PRESENTER_ROLE = "PRESENTER";
var VIEWER_ROLE = "VIEWER";

var TEACHER_TYPE = "TEACHER";
var STUDENT_TYPE = "STUDENT";
var GUEST_TYPE = "GUEST";

var ACCEPT_STATUS = "accept";
var HOLD_STATUS = "hold";
var WAITING_STATUS = "waiting";
var VIEW_STATUS = "view";

var FREETALK_PTT = "freetalk";
var UN_MUTE_PTT = "unmute";		
var MUTE_PTT = "mute";

//For Quiz module
var currentQuizId = null;

var moderatorName;
var currentPresenterName = null;
var currentSelectedViewerName = null;
var shapePropertyNameWhenClear="";
var interactedCount = 0;
var guestCount = 0;
var removedUsersArray=new Array();

function avc_logging(trace_message, caller_name, trace_level)
{
	if (trace_level >= T_TRACE_LEVEL){
		t_curr_time();
		trace("<"+T_CURR_TIME+ ">\tUSER\t[" + caller_name + "]:\t" + trace_message);
	}
}

load("chat_session.asc");
load("sharedobjectlib.asc");
load("chat.asc");

//load("video_sharing.asc");
application.onAppStart = function()
{
	var c_n = "onAppStart";
	avc_logging("Entered Function",c_n,T_DEBUG);
	
	// Get the server shared object 'users_so'
	application.users_so = SharedObject.get("users_so1", false);
	avc_logging("Initialized users_so1 shared object",c_n,T_INFO);
	
	//Timer to call the ping method. This method pings the client to see if it's live
	//and if is not live, disconnects
	setInterval(pollClients,T_PING_INTERVAL);
	
	avc_logging("Calling onAppStartChat() for private chat in chat_session.asc",c_n,T_INFO);
	onAppStartChat();

	//avc_logging("Calling onVideoShareAppStart",c_n,T_INFO);
	//onVideoShareAppStart();
	
	myTimer = setInterval(afterFMSRestart,5000);
	avc_logging("Exited Function",c_n,T_DEBUG);
}

application.onConnect = function(client,name,userDetails,userType,maxStudent,hardwareAddress,lectureID,retryCounter)
{
	var c_n = "onConnect, Client:"+client.id+", "+client.ip+", Name:"+name+", Retry:"+retryCounter+", maxStudent:"+maxStudent+", hardwareAddress:"+hardwareAddress;
	avc_logging("Entered Function",c_n,T_DEBUG);
	
	//For checking maximum number of users
	var studentNumber=application.clients.length;
	avc_logging("Current Number of viewers :"+studentNumber+" Maximum viewers in the class :"+maxStudent,c_n,T_INFO);

	//If maxStudent is either set to -1 or 0, then it means unlimited students are allowed
	if(maxStudent > 0)
	{
		if( (userType == STUDENT_TYPE || userType == GUEST_TYPE)   && studentNumber >= maxStudent)
		{
			avc_logging("Rejecting the current viewer as max number of viewers are exceeding. studentNumber :"+studentNumber+" maxstudent :"+maxStudent,c_n,T_INFO);				application.rejectConnection(client);
				return;
		}
	}
	
	client.hardwareAddress = hardwareAddress;
	client.userType = userType;
	
	if(name)
	{
		//Explicitly close the prvious connections on the same user name
		//So that in case duplicate login we want to close the earlier login with a message
		disconnectPreviousConnections(name,client.id,retryCounter,client.ip,client.hardwareAddress);
	}

	client.name = name;
	
	if(userDetails && userDetails.displayName)
	{
		client.displayName = userDetails.displayName;
	}
	
	//This flag denotes whether this connection is closed because of retrys..
	//This is a initialization
	client.disconnectedDuringRetrys = false;

	///application.av_so.setProperty(name, "both");
	application.acceptConnection(client);
	
	avc_logging("User connected to server. Client.agent:"+client.agent+": Client.ip:"+client.ip
		+": Client.pageUrl:"+client.pageUrl+": Client.referrer:"+client.referrer
		+": Client.uri:"+client.uri+": Client.virtualKey:"+client.virtualKey
		,c_n,T_INFO);

	//Cleanup method, to be called at the end of application close
	client.disconnectConnection=function()
	{
		var c_n = "disconnectConnection Client:"+client.id+","+client.ip+","+client.name+":";
		avc_logging("Entered Function",c_n,T_INFO);
		application.disconnect(client);
		avc_logging("Exited Function",c_n,T_INFO);
	}

	if(application.name.indexOf("/ConnectionTester") != -1)
	{
		avc_logging("Connection testing is successful: client connected. name:"+name+" id:"+client.id+","+client.ip+", appName:"+application.name,"online_directory",T_INFO);
		return;
	}
	if(client.name=="peoplecount")
	{
	  avc_logging("Connection from peoplecount application is successful.returns from onConnect.name"+name);
	  return;
	}
	if(client.userType == GUEST_TYPE)
	{
		guestCount++;
		avc_logging("Guest User connected to server. New Guest Count:"+guestCount
			,c_n,T_INFO);
	}

	//Checking for removed user
	for(i=0;i<removedUsersArray.length;i++)
	{
	 	if(removedUsersArray[i].userName==name && removedUsersArray[i].lectureID==lectureID)
		{
			client.call("alreadyRemovedUser",null,name);
		}
	}

	//This counter is used to log the client poll message only once for T_POLL_TO_LOG_RATIO times
	client.clientPingLogMessageCounter = 0;
	
	avc_logging("Calling onConnectChat()  for private chat in chat_session.asc",c_n,T_INFO);
	onConnectChat(client);

	//avc_logging("Calling onVideoShareConnect",c_n,T_INFO);
	//onVideoShareConnect(client);

	client.setSelectedModule = function(index)
	{
		application.selectedModule_so.setProperty("val", index);
	}

	client.initiateRecordofModerator = function(status,name)
	{
		for (i = 0; i < application.clients.length; i++)
		{
			if(application.clients[i].name == name)
			{
				application.clients[i].call("setRecordStatusModerator",null,status)
			}
		}
	}

	
	
	//restrictUser method,to be called when admin removes a user.
	client.restrictUser=function(uname)
	{
		var c_n = "restrictUser Client:"+client.id+","+client.ip+","+client.name+":";
		avc_logging("Entered Function",c_n,T_INFO);
		for(var i=0;i<application.clients.length;i++)
		{
			if(application.clients[i].name==uname)
			{
			
				avc_logging("Removing user:"+application.clients[i].name,c_n,T_INFO);
				var obj=new Object();
				obj.userName=application.clients[i].name;
				obj.lectureID=lectureID;
				removedUsersArray.push(obj);
				application.clients[i].call("removeUser",null,application.clients[i].name);

			}
		}
	}
	
	//msgFromClient method,to be called when admin sends a message
	client.msgFromClient = function(msg,uname)
	{	
		var c_n = "msgFromClient msg:"+msg+",uname:"+uname;
		//receiving msg from client
		msg =client.name + ": " + msg + "\n";
		for(var j =0; j < application.clients.length; j++)
		{
			avc_logging("inside msgFrom Client");
			avc_logging(msg,c_n,T_INFO);
		
			if(application.clients[j].name == uname)
			{
		       		trace( client.name);
				application.clients[j].call("msgFromSrvr",null,msg,application.clients[j].name);
			}
		}
	}

	
		
//end of adminconsole
	client.poll = function()
	{
		client.clientPingLogMessageCounter++;
		//pingLogMessageCounter is set and reset in pollClients method
		if(client.clientPingLogMessageCounter >= T_POLL_TO_LOG_RATIO)
		{
			c_n = "poll:"+client.id+","+client.ip+","+client.name;
			avc_logging("Polled from client. Printed only once in "+T_POLL_TO_LOG_RATIO+" polls.",c_n,T_DEBUG);
			client.clientPingLogMessageCounter = 0;
		}
	}
     

	client.setUsersSharedObject=function(userName,userStatus,controlStatus,userType,isModerator,isAudioOnlyMode,userDisplayName, 
				isVideoPublishing,isHide,isMute,currentUserRole,streamBandwidth,interactionCount,userInstituteName,avcRuntime,avcDeviceType,videoHeight,videoWidth, viewVideoCount)
	{
		var c_n = "setUsersSharedObject:"+client.id+","+client.ip+","+client.name+","+userName+","+userStatus+","+controlStatus+","+userType+","+isModerator+","+userDisplayName+","+isVideoPublishing+", currentUserRole :"+currentUserRole+", currentPresenterName :"+currentPresenterName+",userInstituteName:"+userInstituteName+","+"avcRuntime:"+avcRuntime+","+"avcDeviceType:"+avcDeviceType+" viewvideo "+viewVideoCount;

		var userRole = null;

			if(isModerator == true)
			{
				if(currentPresenterName == null || currentPresenterName == userName)
				{
					avc_logging("Moderator is set as Presentor",c_n,T_DEBUG);
					userRole = PRESENTER_ROLE;
				}
				else
				{
					avc_logging("Moderator is set as Viewer",c_n,T_DEBUG);
					userRole = VIEWER_ROLE;
				}
			}
			else if(currentUserRole == PRESENTER_ROLE)
			{
				if(currentPresenterName == userName)
				{
					avc_logging("Non Moderator presenter is set as Presentor again",c_n,T_DEBUG);
					userRole = PRESENTER_ROLE;
				}
				else
				{
					avc_logging("Non Moderator presenter is set as Viewer",c_n,T_DEBUG);
					userRole = VIEWER_ROLE;

					//If the current user is not a moderator and was presenter before connection was lost, 
					//And if some one else is current presenter, then we should change the user's status to HOLD, 
					//instead of earlier ACCEPT
					//Bug #686
					userStatus = HOLD_STATUS;
				}

			}
			else
			{
				if(currentPresenterName == userName)
				{
					avc_logging("Non Moderator Viewer is set as Presentor again",c_n,T_DEBUG);
					userRole = PRESENTER_ROLE;
				}
				else
				{
					avc_logging("Non Moderator Viewer is set as Viewer",c_n,T_DEBUG);
				userRole = VIEWER_ROLE;
			}
			}
			
			//If the user is reconnecting. Before loosing connection, the user was in Accept status
			if(userStatus == ACCEPT_STATUS && isModerator != true && userRole != PRESENTER_ROLE)
			{
				//Check to make sure that no other user was made a selected viewer in the mean time
				if(currentSelectedViewerName != null && currentSelectedViewerName != userName)
				{
					avc_logging("The selected viewer is changed to '"+currentSelectedViewerName+"'. Hence setting this user status to Hold.",c_n,T_INFO);
					//If the selected viewer is changed, then set this user's status to Hold status
					userStatus = HOLD_STATUS;
					
				}
			}


            var userProperty=new Object();
		userProperty.userStatus=userStatus;
            userProperty.controlStatus=controlStatus;
		userProperty.userRole=userRole;
	      userProperty.userType=userType;
	      userProperty.isModerator = isModerator;
		  userProperty.isAudioOnlyMode = isAudioOnlyMode;
		userProperty.userDisplayName=userDisplayName;
            userProperty.isVideoPublishing = isVideoPublishing;
	    userProperty.isVideoHide = isHide;
            userProperty.isAudioMute = isMute;
            userProperty.streamBandwidth = streamBandwidth;
            userProperty.id = userName;
		userProperty.userInstituteName=userInstituteName;
		userProperty.userInteractedCount=interactionCount;
		userProperty.avcRuntime=avcRuntime;
		userProperty.avcDeviceType=avcDeviceType;
		userProperty.userInteractedCount=interactionCount;
		userProperty.videoHeight=videoHeight;
		userProperty.videoWidth=videoWidth;
		userProperty.viewVideoCount=viewVideoCount;
	    avc_logging("Setting users_so shared object property "+userName+"'s userStatus to "+ userStatus + " controlStatus to "+ controlStatus +	    
                            " moderatorStatus to "  + isModerator +" User Role to "+ userRole + " display name to "+ userDisplayName + 
			    " videoPublishStatus to" +  isVideoPublishing, c_n,T_INFO+" viewVIdeoCount "+viewVideoCount);

	    //application.users_so.lock();
	    application.users_so.setProperty(userName,userProperty);
	    //application.users_so.unlock();

	    if(userProperty.isModerator == true)
		{
		      moderatorName = userName;
	            avc_logging("Setting MODERATOR Name: " + moderatorName ,c_n, T_INFO);
		}

            if( userProperty.userRole == PRESENTER_ROLE)
		{
	      	currentPresenterName = userName;	     
	            avc_logging("Setting currentPresenterName to: " + currentPresenterName, c_n, T_INFO);
		}
	      

	}
	
	client.getServerTime = function(functionToCall) 
	{
		trace("getServerTime::"+functionToCall) ;
		var now = new Date() ;
		client.call(functionToCall,null,now) ;
	}
	
	client.setUserRole = function(userName,newUserRole)
	{
		var c_n = "setUserRole:"+client.id+","+client.ip+","+client.name+":";

		var userProperty = application.users_so.getProperty(userName);
		if(userProperty)
		{
			userProperty.userRole = newUserRole;
			application.users_so.setProperty(userName,userProperty);
			avc_logging("Setting users_so shared object property "+userName+"'s user Role to "+ newUserRole,c_n,T_INFO);
		}
		else
		{
			avc_logging("userProperty is null while setting users_so shared object property "+userName+"'s user Role to "+ newUserRole,c_n,T_INFO);
		}
	}
	
	client.setControlStatus = function(userName, newControlStatus)
	{
		var c_n = "setControlStatus:"+client.id+","+client.ip+","+client.name+":";

		var userProperty = application.users_so.getProperty(userName);
		if(userProperty)
		{
			userProperty.controlStatus = newControlStatus;
			if(newControlStatus == "prsntr_request")
			{
				userProperty.requestTime = new Date().valueOf();
				avc_logging("Setting users_so shared object property "+userName+"'s user requestTime to "+userProperty.requestTime,c_n,T_INFO);
			}
			else
			{
				userProperty.requestTime = "";
				avc_logging("Resetting users_so shared object property "+userName+"'s user requestTime",c_n,T_INFO);
			}
			application.users_so.setProperty(userName,userProperty);
			avc_logging("Setting users_so shared object property "+userName+"'s control status to "+ newControlStatus,c_n,T_INFO);
		}
		else
		{
			avc_logging("userProperty is null while setting users_so shared object property "+userName+"'s control status to "+ newControlStatus,c_n,T_INFO);
		}
	}

	client.setVideoPublishStatus = function(userName, videoPublishStatus,streamBandwidth,videoHeight,videoWidth)
	{  
		var c_n = "setVideoPublishStatus:"+client.id+","+client.ip+","+client.name+":";

		var userProperty = application.users_so.getProperty(userName);
		if(userProperty)
		{
			userProperty.isVideoPublishing = videoPublishStatus;
			userProperty.streamBandwidth = streamBandwidth;
			userProperty.videoHeight=videoHeight;
			userProperty.videoWidth=videoWidth;
			if( userProperty.userRole == PRESENTER_ROLE)
			{
				if(videoPublishStatus == true)
				{
					userProperty.userStatus = ACCEPT_STATUS;
				}
				else
				{
					userProperty.userStatus = HOLD_STATUS;
				}
			}

			application.users_so.setProperty(userName,userProperty);

			avc_logging("Setting users_so shared object property "+userName+"'s videoPublishStatus to '"+ videoPublishStatus+"'",c_n,T_INFO);
		}
		else
		{
			avc_logging("userProperty is null while setting users_so shared object property "+userName+"'s videoPublishStatus to "+ videoPublishStatus,c_n,T_INFO);
		}
	}


	client.setLocalVideoStatus = function(userName, isHide)
	{  
		var c_n = "setLocalVideoStatus:"+client.id+","+client.ip+","+client.name+":";

		var userProperty = application.users_so.getProperty(userName);
		if(userProperty)
		{
			userProperty.isVideoHide = isHide;
			

			application.users_so.setProperty(userName,userProperty);

			avc_logging("Setting users_so shared object property "+userName+"'s LocalVideoStatus to '"+ isHide+"'",c_n,T_INFO);
		}
		else
		{
			avc_logging("userProperty is null while setting users_so shared object property "+userName+"'s LocalVideoStatus to "+ isHide,c_n,T_INFO);
		}
	}


	client.setLocalAudioStatus = function(userName, isMute)
	{  
		var c_n = "setLocalVideoStatus:"+client.id+","+client.ip+","+client.name+":";

		var userProperty = application.users_so.getProperty(userName);
		if(userProperty)
		{
			userProperty.isAudioMute = isMute;
			

			application.users_so.setProperty(userName,userProperty);

			avc_logging("Setting users_so shared object property "+userName+"'s LocalAudioStatus to '"+ isMute+"'",c_n,T_INFO);
		}
		else
		{
			avc_logging("userProperty is null while setting users_so shared object property "+userName+"'s LocalAudioStatus to "+ isMute,c_n,T_INFO);
		}
	}
	
	client.getStreamTime = function(userName)
	{
		//get date info from system
		var sys_Date = new Date();
		var hours = sys_Date.getHours();
		var minutes = sys_Date.getMinutes();
		var seconds = sys_Date.getSeconds();
		//var milliseconds= sys_Date.getMilliseconds();

		//put zeros where needed
		if (hours <10) {
	     		hours = "0" + hours;
		}
	
		if (minutes <10) {
	     		minutes = "0" + minutes;
		}
	
		if (seconds<10) {
	    	 	seconds = "0" + seconds ;
		}
		//send to text field
		T_SYS_TIME = hours+":"+minutes+":"+seconds+"_"+userName;
		return T_SYS_TIME;

			
	}

	client.setStreamingStatus = function(userName, streamingStatus)
	{  
		var c_n = "setStreamingStatus :"+client.id+","+client.ip+","+client.name+":";

		var userProperty = application.users_so.getProperty(userName);
		if(userProperty)
		{
			userProperty.isAudioOnlyMode = streamingStatus;
			application.users_so.setProperty(userName,userProperty);

			avc_logging("Setting users_so shared object property "+userName+"'s streamingStatus to '"+ streamingStatus+"'",c_n,T_INFO);
		}
		else
		{
			avc_logging("userProperty is null while setting users_so shared object property "+userName+"'s streamingStatus to "+ streamingStatus,c_n,T_INFO);
		}
	}


	client.setUserStatus = function(userName, newUserStatus)
	{  
		var c_n = "setUserStatus:"+client.id+","+client.ip+","+client.name+":";

		var userStatusProperty = application.users_so.getProperty(userName);

		//If the user's shared object is not yet set, but setUserStatus could be called.
		//This could some times happen if the user just logs in
		if(!userStatusProperty)
		{
			avc_logging("userProperty is null while setting users_so shared object property "+userName+"'s user status to "+ newUserStatus,c_n,T_INFO);
			return;
		}

		if(newUserStatus == ACCEPT_STATUS)
		{
			
			var userInteractedCount = userStatusProperty.userInteractedCount;
			if(userInteractedCount == null)
			{
				userInteractedCount = interactedCount;
			}
			userInteractedCount = userInteractedCount + 1;
			currentSelectedViewerName = userName;
			userStatusProperty.userInteractedCount = userInteractedCount;
			avc_logging("Setting the currentSelectedViewerName value to '"+userName+"'",c_n,T_INFO);
		}
		else if(currentSelectedViewerName == userName)
		{
			currentSelectedViewerName = null;
			avc_logging("Resetting the currentSelectedViewerName value to null",c_n,T_INFO);
		}

		userStatusProperty.userStatus = newUserStatus;
		
		if(newUserStatus == ACCEPT_STATUS || newUserStatus == HOLD_STATUS )
		{
			userStatusProperty.requestTime = "";
			avc_logging("Resetting users_so shared object property "+userName+"'s user requestTime",c_n,T_INFO);
		}
		else if(newUserStatus == WAITING_STATUS)
		{
			userStatusProperty.requestTime = new Date().valueOf();
			avc_logging("Setting users_so shared object property "+userName+"'s user requestTime to "+userStatusProperty.requestTime,c_n,T_INFO);
		}
		application.users_so.setProperty(userName, userStatusProperty);
		avc_logging("Setting users_so shared object property "+userName+"'s user status to "+ newUserStatus,c_n,T_INFO);
	}
	     
	client.setViewVideoCount = function(userName)
	{
		var userStatusProperty = application.users_so.getProperty(userName);
		var userInteractedCount = userStatusProperty.viewVideoCount;
		userInteractedCount = userInteractedCount + 1;
		userStatusProperty.viewVideoCount = userInteractedCount;
		application.users_so.setProperty(userName, userStatusProperty);
	}
        client.giveControl = function(selectedUserName, classModeratorName)
	{
		var c_n = "giveControl:"+client.id+","+client.ip+","+client.name+":";

		var userControlProperty = application.users_so.getProperty(selectedUserName);
		var moderatorControlProperty = application.users_so.getProperty(classModeratorName);
		if(userControlProperty && moderatorControlProperty)
		{
			userControlProperty.userRole = PRESENTER_ROLE;
			avc_logging("Publishing status of '"+selectedUserName+"' is '"+userControlProperty.isVideoPublishing+"'",c_n,T_INFO);

			if(userControlProperty.isVideoPublishing == true)
			{
				userControlProperty.userStatus = ACCEPT_STATUS;
				avc_logging("Accept Block:User status of '"+selectedUserName+"' is '"+userControlProperty.userStatus+"'",c_n,T_INFO);
			}
			else
			{
				userControlProperty.userStatus = HOLD_STATUS;
				avc_logging("Hold Block:User status of '"+selectedUserName+"' is '"+userControlProperty.userStatus+"'",c_n,T_INFO);
			}
			userControlProperty.controlStatus = "null"; 

			moderatorControlProperty.userRole = VIEWER_ROLE;
			moderatorControlProperty.userStatus = HOLD_STATUS;

			application.users_so.lock();
			application.users_so.setProperty(selectedUserName,userControlProperty);
			application.users_so.setProperty(classModeratorName,moderatorControlProperty); 
			application.users_so.unlock();	
			currentPresenterName = selectedUserName;
		        avc_logging("Setting currentPresenterName to: " + currentPresenterName, c_n, T_INFO);
			
			avc_logging("Setting users_so shared object userRole of '"+selectedUserName+"' to PRESENTER and userStatus to '"+userControlProperty.userStatus+"'",c_n,T_INFO);
		}
		else
		{
			avc_logging("Can't set users_so shared object userRole of '"+selectedUserName+"' to PRESENTER and userStatus to '"+userControlProperty.userStatus+"' as one of these user's property is null",c_n,T_INFO);
		}

	}
	
	client.takeControl = function(classModeratorName)
	{             
		var c_n = "takeControl:"+client.id+","+client.ip+","+client.name+":";

		var userControlProperty = application.users_so.getProperty(currentPresenterName);
		var moderatorControlProperty = application.users_so.getProperty(classModeratorName);
		if(userControlProperty && moderatorControlProperty)
		{
			userControlProperty.userRole = VIEWER_ROLE;
			userControlProperty.userStatus = HOLD_STATUS;          

			moderatorControlProperty.userRole = PRESENTER_ROLE;
			if(moderatorControlProperty.isVideoPublishing == true)
			{
				moderatorControlProperty.userStatus = ACCEPT_STATUS;
				avc_logging("Accept Block:User status of '"+classModeratorName+"' is '"+moderatorControlProperty.userStatus+"'",c_n,T_INFO);
			}
			else
			{
				moderatorControlProperty.userStatus = HOLD_STATUS;
				avc_logging("Hold Block:User status of '"+classModeratorName+"' is '"+moderatorControlProperty.userStatus+"'",c_n,T_INFO);
			}
			application.users_so.lock();
			application.users_so.setProperty(currentPresenterName,userControlProperty);
			application.users_so.setProperty(classModeratorName,moderatorControlProperty); 
			application.users_so.unlock();

			currentPresenterName = classModeratorName;
	            	avc_logging("Setting currentPresenterName to: " + currentPresenterName, c_n, T_INFO);
			//If PTT is on, when control is given back to moderator, the moderator should be on talk
			if(application.audioMuteSharedObject.getProperty(PRESENTER_ROLE) !=FREETALK_PTT || application.audioMuteSharedObject.getProperty(PRESENTER_ROLE) != classModeratorName)
			{
				avc_logging("AKR:::"+classModeratorName,c_n,T_INFO);
				client.setAudioMuteSharedObject(classModeratorName);
			}
			else
			{
				avc_logging("Can't set users_so shared object userRole of '"+ currentPresenterName + "' to VIEWER ' as one of these user's property is null",c_n,T_INFO);
			}
		}
	}
	
	//This function is used for starting the live quiz in the client side
	//This is the first version. The teacher passes the Quiz id to this function
	//This function currently works only for thoese users who have already logged into the class
	//Added one more argument to check if the incoming request is for Quiz or Polling
	client.startLiveQuizServer = function(quizId, isQuiz)
	{
		var c_n = "startLiveQuiz:"+client.id+","+client.ip+","+client.name+":";
		avc_logging("Entering the start live quiz with id '" + quizId + "'", c_n,T_INFO);
		currentQuizId = quizId;
		invokeLiveQuiz(isQuiz);
		avc_logging("Exiting the start live quiz with id '" + quizId + "'", c_n,T_INFO);
	}
	
	//This function is used for stopping the live quiz in the client side
	//This is the first version
	client.stopLiveQuiz = function()
	{
		var c_n = "stopLiveQuiz:"+client.id+","+client.ip+","+client.name+":";
		avc_logging("Entering the stop live quiz with id '" + currentQuizId + "'", c_n,T_INFO);
		currentQuizId = null;		
	}
	client.getPlayheadTimeForLateComingUser = function(uname)
	{
		trace("inside ")
		c_n = "timReqLateUser: uname"+uname;
		avc_logging("Entered Function",c_n,T_DEBUG);

		//Getting the presenter's connection
		clientObj = getCurrentActiveClient(currentPresenterName);

		if(clientObj != "")
		{
			avc_logging("Found presenter's connection",c_n,T_DEBUG);
			clientObj.call("getPlayheadTime",null,uname);
		}
	}

	client.sendPlayheadTimeToUser = function(sliderTim,uname)
	{
		c_n = "timInfo: uname"+uname+": sliderTim:"+sliderTim;
		avc_logging("Entered Function",c_n,T_DEBUG);

		//Getting the users's connection
		clientObj = getCurrentActiveClient(uname);
        trace("Found client"+clientObj.name)
		if(clientObj != "")
		{
			avc_logging("Found u's connection",c_n,T_DEBUG);
			clientObj.call("getPlayheadTimeForLateComingUser",null,sliderTim,uname);
		}
	}

     	avc_logging("Exited Function",c_n,T_DEBUG);
}//End onConnect() 


function getCurrentActiveClientId(name)
{
	var c_n = "getCurrentActiveClientId, name:"+name;
	avc_logging("Entered Function",c_n,T_INFO);
	
	clientObj = getCurrentActiveClient(name);
	if(clientObj != "")
	{
		return clientObj.id;
	}
	
	avc_logging("Exited Function",c_n,T_INFO);
	return "";
}

function getCurrentActiveClient(name)
{
	var c_n = "getCurrentActiveClient, name:"+name;
	avc_logging("Entered Function",c_n,T_INFO);
	
	avc_logging("Current number of clients:"+application.clients.length,c_n,T_INFO);

	for (i = 0; i < application.clients.length; i++){
		if(application.clients[i].name == name)
		{
			return application.clients[i];
		}
	}
	
	avc_logging("Exited Function",c_n,T_INFO);
	return "";
}
//
//This function is called during a successful retry. 
//It takes the client name and clientid and searches the existing connections 
//with the same name and different id and close them. 
//These are the previous connection which are already closed but the server may not know about them yet.
//We are expediting the close process, because some times server takes long time to realize the connection is already closed
//Because of this delay, there are several issues on the client side
//
function disconnectPreviousConnections(name,newClientId,retryCounter,newClientIP,newClientHardwareAddress)
{
	var c_n = "disconnectPreviousConnections, Name:"+name+": NewId:"+newClientId+": retryCounter:"+retryCounter+": NewIP:"+newClientIP+": NewMacAddress:"+newClientHardwareAddress;
	
	avc_logging("Entered Function Current number of clients:"+application.clients.length,c_n,T_INFO);

	for (i = 0; i < application.clients.length; i++)
	{
	
		if(application.clients[i].name == name && application.clients[i].id != newClientId)
		{
			var userProperty = application.users_so.getProperty(name);
			if(retryCounter > 0)
			{
				application.clients[i].disconnectedDuringRetrys = true;
			}

				
			avc_logging("Calling the duplicate login call back function:"
				+": id:"+application.clients[i].id
				+": ip:"+application.clients[i].ip
				+": hardwareAddress:"+application.clients[i].hardwareAddress
				+": name:"+application.clients[i].name
				+": retryDisconnect:"+application.clients[i].disconnectedDuringRetrys
				,c_n,T_DEBUG);

			//Bug 5080: Selected viewer video not visible at both sides
			//Some times,during network reconnections, due to timing issues, same node might try to reconnect after successfull reconnection
			//In the at case we will close the client connection silently
			if(userProperty)
			{
				if(application.clients[i].hardwareAddress != newClientHardwareAddress || userProperty.avcRuntime == "BROWSER")
				{
				application.clients[i].call("duplicateLogin",null,newClientIP);
			}
			}

			//This is just to make sure that server dispatches the above client call, before disconnecting the client
			avc_logging("Setting the 1 second interval:",c_n,T_DEBUG);

			application.clients[i].intervalId = setInterval(disconnectConnectionO,1000,application.clients[i]);
			
			avc_logging("DisconnectIntervalId:"+application.clients[i].intervalId,c_n,T_DEBUG);

		}
	}
	
	avc_logging("Exited Function",c_n,T_INFO);
}


//Same as above client.disconnectConnection method. But this also disables the timer.
//Takes in the oldClient as the parameter.
function disconnectConnectionO(oldClient)
{
	var c_n = "disconnectConnectionO Client:"+oldClient.id+","+oldClient.ip+","+oldClient.name;
	
	avc_logging("Entered Function",c_n,T_INFO);
	
	clearInterval(oldClient.intervalId);
	
	avc_logging("Called clear interval",c_n,T_INFO);

	application.disconnect(oldClient);
	avc_logging("Exited Function",c_n,T_INFO);
}

//This function is pinging the client to see if the client is alive or not
//If the client is not alive, it initiates the disconnection process
//This cuts down the time for server to realize a lost client to max of the timer interval (10secs)
function pollClients()
{
	for (i = 0; i < application.clients.length; i++)
	{
		application.clients[i].ping();
	}
}

function afterFMSRestart()
{
	
	for (i = 0; i < application.clients.length; i++)
	{
		application.clients[i].call("msgAfterFMSRestart",null);
	}
	clearInterval(myTimer);
}



application.onDisconnect = function(client)
{
	var c_n = "onDisconnect, Client:"+client.id+", "+client.name+", "+client.ip;
	avc_logging("Entered Function",c_n,T_DEBUG);
	
	currentClientId = getCurrentActiveClientId(client.name);
	if(client.name=="peoplecount")
	{
		avc_logging("connection from peoplecount disconnected :",c_n,T_INFO);
	  return;
	}
	avc_logging("Current Id for this user is :"+currentClientId+":",c_n,T_INFO);

	if(currentClientId !="" && currentClientId != client.id)
	{
		avc_logging("User already connected with a new client id :"+currentClientId+". Hence not cleaning the shared objects",c_n,T_INFO);
		for (i = 0; i < application.clients.length; i++)
		{
			application.clients[i].call("checkForRecording",null,client.name);			
		}
		return;
	}
	
	if(currentSelectedViewerName == client.name)
	{
		currentSelectedViewerName = null;
		avc_logging("Resetting the currentSelectedViewerName value to null",c_n,T_INFO);
	}
	

	avc_logging("Locked the users_so shared object:",c_n,T_INFO);
	application.users_so.lock();
      	var userProperty = application.users_so.getProperty(client.name);
      	
      	if(userProperty && userProperty.isModerator)
      	{
		avc_logging("Moderator is disconnecting, setting the moderatorName to null",c_n,T_INFO);
      		moderatorName = null;
      	}

    //avc_logging("Calling onVideoShareDisconnect()",c_n,T_DEBUG);
	//onVideoShareDisconnect(client);

	if(userProperty && userProperty.userRole == PRESENTER_ROLE )
	{

		if(!userProperty.isModerator)
		{
	    		avc_logging("Current Moderator Name: " + moderatorName,c_n,T_INFO);
			var moderatorUserProperty = application.users_so.getProperty(moderatorName);
			if(moderatorUserProperty)
			{
				moderatorUserProperty.userRole = PRESENTER_ROLE;
				if(moderatorUserProperty.isVideoPublishing == true)
				{
					moderatorUserProperty.userStatus = ACCEPT_STATUS;
					avc_logging("Accept Block:User status of '"+moderatorName+"' is '"+moderatorUserProperty.userStatus+"'",c_n,T_INFO);
				}
				else
				{
					moderatorUserProperty.userStatus = HOLD_STATUS;
					avc_logging("Hold Block:User status of '"+moderatorName+"' is '"+moderatorUserProperty.userStatus+"'",c_n,T_INFO);
				}
				currentPresenterName = moderatorName;
				application.users_so.setProperty(moderatorName,moderatorUserProperty);		
			        avc_logging("Setting currentPresenterName to: " + currentPresenterName, c_n, T_INFO);
			}
			else
			{
				currentPresenterName = null;
			        avc_logging("Setting currentPresenterName to: " + currentPresenterName, c_n, T_INFO);
			}
		}
		else
		{
			currentPresenterName = null;
			avc_logging("Setting currentPresenterName to: " + currentPresenterName, c_n, T_INFO);
			avc_logging(" Setting the currentPresenter Name to: NULL as the moderator who is also the presenter is disconneted",c_n,T_INFO);
		}
	}
	else if(userProperty)
	{
		avc_logging("Role of the user who is getting disconnected is:"+userProperty.userRole,c_n,T_INFO);
	}
	else
	{
		avc_logging("User does not have any property in the users_so shared object",c_n,T_INFO);
	}
      
	application.users_so.setProperty(client.name, null);
	avc_logging("Setting the "+client.name+" property value to null in users_so shared object",c_n,T_INFO);

	application.users_so.flush();
        application.users_so.unlock();	

	if(client.userType == GUEST_TYPE)
	{
		guestCount--;
		avc_logging("Guest User disconnected from server. New Guest Count:"+guestCount
			,c_n,T_INFO);
	}
	

	avc_logging("Exited Function",c_n,T_DEBUG);
}

//This function actually calls the live quiz in client side
function invokeLiveQuiz(isQuiz)
{
	if(currentQuizId != null)
	{
		for (i = 0; i < application.clients.length; i++)
		{
		    //Sending back the argument which tells if this request is Quiz or Polling
			application.clients[i].call("startLiveQuizClient",null,currentQuizId, isQuiz);			
		}
	}
}

function t_curr_time(){
	//get date info from system
	var mydate_ist = new Date();
	var hrs_ist = mydate_ist.getHours();
	var mins_ist = mydate_ist.getMinutes();
	var secs_ist = mydate_ist.getSeconds();
	var milli_ist = mydate_ist.getMilliseconds();

	//put zeros where needed
	if (hrs_ist<10) {
	     hrs_ist = "0" + hrs_ist;
	}
	
	if (mins_ist<10) {
	     mins_ist = "0" + mins_ist;
	}
	
	if (secs_ist<10) {
	     secs_ist = "0" + secs_ist;
	}
	
	if (milli_ist<100) {
	     milli_ist = "0" + milli_ist;
	} else if (milli_ist<10) {
	     milli_ist = "00" + milli_ist;
	}
	//send to text field
	T_CURR_TIME = hrs_ist+":"+mins_ist+":"+secs_ist+":"+milli_ist;
}



